<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RI-ME</title>
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet" />
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <style>
      body {
        margin: 0;
        background: linear-gradient(
          -45deg,
          /* #ee7752, */ /* #e73c7e, */ #23a6d5,
          #94d523,
          yellow
        );
        background-size: 400% 400%;
        animation: gradient 15s ease infinite;
        /* height: 110vh; */
      }
      @keyframes gradient {
        0% {
          background-position: 0% 50%;
        }

        50% {
          background-position: 100% 50%;
        }

        100% {
          background-position: 0% 50%;
        }
      }
      .reviewFormContainer {
        position: relative;
        /* border: 20px solid red; */
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        height: fit-content;
      }

      .reviewFormContainer .air {
        position: fixed;
        bottom: 0;
        /* z-index: 0; */
        left: 0;
        width: 100%;
        height: 100px;
        background: url(https://1.bp.blogspot.com/-xQUc-TovqDk/XdxogmMqIRI/AAAAAAAACvI/AizpnE509UMGBcTiLJ58BC6iViPYGYQfQCLcBGAsYHQ/s1600/wave.png);
        background-size: 1000px 100px;
      }

      .reviewFormContainer .air.air1 {
        animation: wave 30s linear infinite;
        z-index: 1000;
        opacity: 1;
        animation-delay: 0s;
        bottom: 0;
      }

      .reviewFormContainer .air.air2 {
        animation: wave2 15s linear infinite;
        z-index: 999;
        opacity: 0.5;
        animation-delay: -5s;
        bottom: 10px;
      }

      .reviewFormContainer .air.air3 {
        animation: wave 30s linear infinite;
        z-index: 998;
        opacity: 0.2;
        animation-delay: -2s;
        bottom: 15px;
      }

      .reviewFormContainer .air.air4 {
        animation: wave2 5s linear infinite;
        z-index: 997;
        opacity: 0.7;
        animation-delay: -5s;
        bottom: 20px;
      }
      @keyframes wave {
        0% {
          background-position-x: 0px;
        }

        100% {
          background-position-x: 1000px;
        }
      }

      @keyframes wave2 {
        0% {
          background-position-x: 0px;
        }

        100% {
          background-position-x: -1000px;
        }
      }
      form {
      }

      .star-rating {
        direction: rtl;
        font-size: 30px;
        line-height: 1;
        margin-bottom: 10px;
      }

      .star-rating input[type="radio"] {
        display: none;
      }

      .star-rating label {
        color: #ccc;
        cursor: pointer;
      }

      .star-rating input[type="radio"]:checked ~ label,
      .star-rating label:hover,
      .star-rating label:hover ~ label {
        color: gold;
      }

      textarea {
        box-sizing: border-box;
        width: 100%;
        padding: 15px; /* Increased padding for better text readability */
        margin-top: 10px;
        margin-bottom: 20px;
        border-radius: 8px; /* Slightly larger radius for a softer look */
        border: 1px solid #ccc; /* Lighter border color for less visual weight */
        background-color: #f9f9f9; /* Light background color to differentiate from the page */
        min-height: 150px; /* Increased minimum height for more initial writing space */
        resize: vertical; /* Keeps the resizing to vertical only */
        outline: none; /* Removes the default focus outline */
        transition: border-color 0.3s, box-shadow 0.3s; /* Smooth transition for interactions */
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; /* Modern, readable font */
      }
      .suggestion input[type="radio"]:hover + label {
        background-color: rgba(0, 0, 0, 0.2);
      }
      textarea:focus {
        border-color: #94d523; /* Highlight color when focused */
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25); /* Subtle glow effect on focus */
      }

      .suggestions .suggestion {
        margin: 10px 0;
      }

      .suggestion input[type="radio"] {
        display: none;
      }

      .suggestion label {
        background-color: #f0f0f0;
        color: black;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      .suggestion input[type="radio"]:checked + label {
        background-color: #94d523;
        color: white;
      }

      body {
        font-family: "Arial", sans-serif;
        background-color: #f4f7f6;
        margin: 0;
        padding: 0;
        color: #333;
      }

      #mainForm {
        max-width: 600px;
        margin: 12vh 0 0 0;
        padding: 20px;
        position: relative;
        z-index: 10000;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      }

      h1 {
        font-size: 2.5rem;
        color: #333;
        text-align: center;
        margin-bottom: 20px;
      }

      .star-rating {
        text-align: center;
        margin-bottom: 20px;
      }

      .star-rating label {
        color: #ccc;
        font-size: 40px;
        cursor: pointer;
        transition: color 0.3s ease;
      }

      select {
        width: 100%;
        padding: 15px 20px; /* Increased padding for better ergonomics */
        margin: 10px 0; /* Adjusted margin for better spacing */
        display: block; /* Ensures full width, consider keeping inline-block if needed for layout */
        border-radius: 8px; /* Softer border-radius for a modern look */
        border: 1px solid #bbb; /* Lighter border for subtlety */
        box-sizing: border-box; /* Keeps padding and border inside width */
        background-color: white; /* Ensures a consistent background */
        cursor: pointer; /* Changes cursor to pointer to indicate selectability */
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; /* Modern, readable font */
        font-size: 16px; /* Improved readability */
        color: #333; /* Default text color for better contrast */
        -webkit-appearance: none; /* Removes default styling on WebKit browsers */
        -moz-appearance: none; /* Removes default styling on Mozilla browsers */
        appearance: none; /* Standard way to remove default arrow, for custom styling */
        background-image: url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2048 2048"><path fill="%23333" d="M2048 384v128H0V384h2048zm0 640V896H0v128h2048zm0 640v-128H0v128h2048z"/></svg>'); /* Custom dropdown arrow */
        background-repeat: no-repeat, repeat; /* Makes sure the arrow image does not repeat */
        background-position: right 20px top 50%, 0 0; /* Positions the arrow on the right */
        background-size: 12px 12px; /* Size of the custom arrow */
        transition: border-color 0.3s ease; /* Smooth transition for border color */
      }
      select:hover {
        border-color: #94d523; /* Darker border on hover for feedback */
      }

      select:focus {
        border-color: #94d523; /* Focus color to indicate active selection */
        outline: none; /* Removes default focus outline */
        box-shadow: 0 0 0 2px rgba(85, 85, 85, 0.2); /* Subtle shadow to highlight focus */
      }

      select {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border-radius: 4px;
        border: 1px solid #ccc;
        box-sizing: border-box;
      }

      .suggestions {
        margin-top: 20px;
      }

      .suggestion label {
        display: block;
        background-color: #e9e9e9;
        color: black;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
        margin-bottom: 10px;
      }

      input[type="submit"] {
        width: 100%;
        background-color: #4caf50;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      input[type="submit"]:hover {
        background-color: #45a049;
      }

      @media screen and (max-width: 768px) {
        body {
          padding: 0 10px;
        }

        #mainForm {
          width: 80%;
        }
      }

      .notification {
        background-color: #62cc5c; /* Dark background for contrast */
        color: #fff; /* White text */
        padding: 15px 20px; /* Padding around the text */
        border-radius: 25px; /* Rounded corners */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3); /* Subtle shadow for depth */
        position: fixed;
        z-index: 1000;
        right: 20px;
        top: 20px;
        font-family: "Arial", sans-serif;
        font-size: 16px;
        transition: transform 0.5s ease, opacity 0.5s ease;
        transform: translateY(-100px);
        opacity: 0;
        display: flex;
        align-items: center;
      }

      .notification-icon {
        margin-right: 10px;
      }

      .notification.show {
        transform: translateY(83px);
        opacity: 1;
      }

      .notification.hide {
        transform: translateY(-100px);
        opacity: 0;
      }

      /* Optional: Animation for icon */
      @keyframes icon-animation {
        0% {
          transform: scale(1);
        }
        50% {
          transform: scale(1.1);
        }
        100% {
          transform: scale(1);
        }
      }

      .notification-icon {
        animation: icon-animation 2s infinite;
      }
      .header {
        /* background-color: #4caf50 !important; */
        padding: 15px;
        text-align: center;
        /* margin: ; */
        position: fixed;
        z-index: 20000;
        width: 98vw;
        top: 0;
       
      }
      .header h1 {
        text-align: center;
        margin: 0;
        padding: 0;
        color: white ;
        font-family: Georgia, "Times New Roman", Times, serif;
        text-transform: capitalize;
        color: #ffffff75;
      }
    </style>
  </head>
  <body>
    <!-- Notification -->
    <div id="notification" class="notification">
      <p>Here is your notification!</p>
    </div>

    <section class="reviewFormContainer">
      <div class="header"><h1><%= data["business_name"] %></h1></div>
      <form id="mainForm" action="/api/review" method="post">
        <!-- Hidden input for the business -->
        <% if(data){ %> <input type="hidden" name="business_id"
        value="<%-data["business_id"]%>"> <% } %>

        <!-- Star rating section -->
        <div class="star-rating">
          <input
            type="radio"
            name="starCount"
            id="star5"
            value="5"
            aria-label="5 stars"
          /><label for="star5">★</label>
          <input
            type="radio"
            name="starCount"
            id="star4"
            value="4"
            aria-label="4 stars"
          /><label for="star4">★</label>
          <input
            type="radio"
            name="starCount"
            id="star3"
            value="3"
            aria-label="3 stars"
          /><label for="star3">★</label>
          <input
            type="radio"
            name="starCount"
            id="star2"
            value="2"
            aria-label="2 stars"
          /><label for="star2">★</label>
          <input
            type="radio"
            name="starCount"
            id="star1"
            value="1"
            aria-label="1 star"
            checked
          /><label for="star1">★</label>
        </div>
        <div class="suggestions" id="suggestion"></div>
        <textarea
          name="textReview"
          id="review"
          placeholder="Your Review"
        ></textarea>
        <label for="summaryDropdown">Select a Summary:</label>
        <select id="summaryDropdown" name="platform">
        </select>
        <input type="submit" value="Submit" />
      </form>
      <!-- Air Waves  -->
      <div class="air air1"></div>
      <div class="air air2"></div>
      <div class="air air3"></div>
      <div class="air air4"></div>
    </section>

    <script>
      const SocialMediaNames={
        'google':'Google Review',
        'twitter':'Twitter Post',
        'facebook':'Facebook Page Review',
        'instagram':'Instagram page Review',
        'glassdoor':'Glassdoor page Review',
      }
        function updateSummaryDropdown(starRating) {

        let  {generated:data,activePlatforms} = <%-JSON.stringify(data)%> // Convert your server-side data to a JavaScript object
        console.log(activePlatforms)
        const summaryDropdown = document.getElementById("summaryDropdown");
        summaryDropdown.innerHTML = '<option value="">-- Select Review Platform --</option>';
        for(let socialmedia in SocialMediaNames){
          if(activePlatforms.includes(socialmedia)){
            let option = document.createElement("option");
            option.value = socialmedia;
            option.textContent = SocialMediaNames[socialmedia];
            summaryDropdown.appendChild(option);
          }
        }
        
        const summaries = data[starRating + 'star']; // Access the correct star rating reviews
        var optionialReviews='';
        var i=0;
        // Add new options
        Object.keys(summaries).forEach((key, index) => {
          const review = summaries[key];
          const option = document.createElement('option');
          option.value = review.review;
          option.textContent = review.summary;
         
          const aosAnimation = index % 3 === 0 ? 'fade-up' : (index % 3 === 1 ? 'zoom-in' : 'flip-left');
          const delay = index * 100; // Adjust the delay here, e.g., 100ms increment for each item

          optionialReviews += `
            <div class="suggestion" data-aos="${aosAnimation}" data-aos-delay="${delay}">
              <input type="radio" id="suggestion${index}" name="suggestion" value="${review.review}">
              <label for="suggestion${index}" class="suggestion${index} flagClassName">${review.summary}</label>
            </div>`;
        });
        document.getElementById('suggestion').innerHTML= optionialReviews;
        document.querySelectorAll('.suggestion input[type="radio"]').forEach((radio, index) => {
        radio.addEventListener('change', function() {
          if (this.checked)
          {
            let labelClassName = this.getAttribute('id');
            document.getElementsByClassName(this.getAttribute('id'))[0].classList.add('changeBg');
            document.querySelectorAll('.flagClassName').forEach(labelTag => {
              if(!labelTag.classList.contains(labelClassName)) {
                labelTag.classList.remove('changeBg')
              }
            });
            console.log(document.getElementsByClassName(this.getAttribute('id'))[0])
            setTextWithInterval(this.value);
            navigator.clipboard.writeText(this.value).then(() => {
              console.log('Text copied to clipboard');
              notify("Your review has been copied to clipboard ! now you can paste it");
            }).catch(err => {
                console.error('Error in copying text: ', err);
            });
          }
        });
      });
      }

      // Event listener for star rating changes
      document.querySelectorAll('.star-rating input[type="radio"]').forEach(radio => {
        radio.addEventListener('change', function() {
          updateSummaryDropdown(this.value);
          AOS.init();
        });
      });


      //Helpers
      let token=0;
      async function setTextWithInterval(text)
      {
          const currentToken=++token;
          var reviewEle=document.getElementById("review")
          reviewEle.value='';
          var typeWriterRunning=false;
          var text=text;
          let i=0;
          for(let i=0;i<text.length;i++){
            if(token!=currentToken){
              return;
            }
            reviewEle.value+=text.charAt(i);
            await sleep(15);
          }
      }
      function notify(text)
      {
        var notification = document.getElementById('notification');
          notification.classList.add('show');
              notification.classList.remove('hide');
              notification.innerText=text;

              // Hide the notification after 3 seconds
              setTimeout(function() {
                  notification.classList.add('hide');
                  notification.classList.remove('show');
              }, 3000);
      }
      function sleep(time)
        {
          return new Promise((resolve,reject)=>
          {
            setTimeout(()=>
            {
              resolve();
            },
            time)
          })
        }

      //Initial Callers
      updateSummaryDropdown('1');
    </script>
    <script>
      AOS.init();
    </script>
  </body>
</html>
